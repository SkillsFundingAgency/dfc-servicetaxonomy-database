variables:
  - group: dfc-shared-dev
  - group: KeyVault - dfc-dev-shared-kv

resources:
  repositories:
  - repository: self

trigger: 
  branches:
    include: 
    - master
  paths: 
    include:
    - Resources/Dockerfiles

pr:
  branches:
    include: 
    - master
  paths: 
    include:
    - Resources/Dockerfiles

stages:

- stage: Build
  jobs:

  - job: BuildNCSServiceTaxonomyEscoDbContainer
    displayName: Build and publish NCS.ServiceTaxonomy.EscoDb container
    pool: 'Hosted Ubuntu 1604'
    variables:
      #TO DO: decide how to tag and publish image builds from branches
      AppImageName: NCS.ServiceTaxonomy.EscoDb:$(Build.BuildNumber)

    steps:
    - script: |
        cd ./Resources/Dockerfiles
        AppImageName=$(AppImageName)
        AppImageName=${AppImageName,,}
        docker build -t $(ContainerRegistryAdminUser).azurecr.io/$AppImageName --file neo4jescodb.Dockerfile .
      displayName: 'Build NCS.ServiceTaxonomy.EscoDb container'
    - script: |
        docker login -u $(ContainerRegistryAdminUser) -p $(ContainerRegistryPassword) $(ContainerRegistryAdminUser).azurecr.io
        AppImageName=$(AppImageName)
        AppImageName=${AppImageName,,}
        docker push $(ContainerRegistryAdminUser).azurecr.io/$AppImageName
      displayName: 'Publish NCS.ServiceTaxonomy.EscoDb container'

- stage: DeployToDev
  jobs:

  - deployment: DeployToDev
    pool:
      name: 'NCS - CI and CD'
    variables:
    - group: KeyVault - dfc-dev-shared-kv
    - group: dfc-shared-dev
    - group: dfc-stax-shared-dev
    environment: DEV_SERVICETAXONOMY
    strategy:
      runOnce:
        deploy:
          steps:
            # create storage secret
          - task: Kubernetes@1
            displayName: kubectl apply
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: 'SFA-CDH-Dev/Test (962cae10-2950-412a-93e3-d8ae92b17896)'
              azureResourceGroup: $(sharedResourceGroup)
              kubernetesCluster: $(sharedAksCluster)
              ##TO DO: decide whether to use admin cred or if user account can be used if users are configured
              useClusterAdmin: true
              namespace: 'default'
              command: 'create'
              arguments: secret
              secretType: generic
              secretArguments: --from-literal=azurestorageaccountname=$(StaxSharedStorageAccountName) --from-literal=azurestorageaccountkey=$(dfcdevstaxsharedstr)
              secretName: $(StaxSharedStorageAccountName)-account-secret
            # deploy manifest