parameters:
  ArmTemplateRoot: '$(Pipeline.Workspace)/Dfc.ServiceTaxonomy.Database.Resources.ArmTemplates'
  AksResourceGroup: ''
  AzureSubscriptionEndpoint: ''
  CertificateSecretName: ''
  Environment: ''
  EnvironmentTag: ''
  ImageBaseName: ''
  DraftImageBaseName: ''
  VisitImageBaseName: ''
  KeyVaultName: ''
  KubernetesCluster: ''
  Neo4jPassword: ''
  ParentBusinessTag: ''
  ResourceGroup: ''
  ServiceOfferingTag: ''
  SolutionBaseName: ''
  StaxSharedStorageAccountKey: ''
  StaxDraftStorageAccountKey: ''
  StaxVisitStorageAccountKey: ''
  StaxSharedStorageAccountName: ''
  StaxDraftStorageAccountName: ''
  StaxVisitStorageAccountName: ''
  StaxSharedStorageAccountResourceGroup: ''
  Neo4jNamespace: ''
  Neo4jDraftNamespace: ''
  Neo4jVisitNamespace: ''

jobs:
- deployment: DeployTo_${{ parameters.Environment }}
  pool:
    name: 'NCS - CI and CD'
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        - template: AzureDevOpsTemplates/Deploy/StepTemplates/dfc-arm-deploy.yml@dfc-devops
          parameters:
            ArmTemplateRoot: ${{ parameters.ArmTemplateRoot }}
            AzureSubscription: ${{ parameters.AzureSubscriptionEndpoint }}
            EnvironmentTag: ${{ parameters.EnvironmentTag }}
            ParentBusinessTag: ${{ parameters.ParentBusinessTag }}
            ResourceGroup: ${{ parameters.ResourceGroup }}
            ServiceOfferingTag: ${{ parameters.ServiceOfferingTag }}
        # convert and copy certificate to containers
        - task: AzurePowerShell@4
          displayName: 'Azure PowerShell script: Set-CertficatesDirectoriesInFileShare'
          inputs:
            azureSubscription: ${{ parameters.AzureSubscriptionEndpoint }}
            scriptPath: $(Pipeline.Workspace)/${{ parameters.SolutionBaseName }}.PSScripts/Set-CertficatesDirectoriesInFileShare.ps1
            scriptArguments: '-ResourceGroupName ${{ parameters.StaxSharedStorageAccountResourceGroup }} -ShareName "certificates" -StorageAccountName ${{ parameters.StaxSharedStorageAccountName }} -Verbose'
            azurePowerShellVersion: 'latestVersion'
        - task: AzurePowerShell@4
          displayName: 'Azure PowerShell script: Set-CertficatesDirectoriesInFileShare'
          inputs:
            azureSubscription: ${{ parameters.AzureSubscriptionEndpoint }}
            scriptPath: $(Pipeline.Workspace)/${{ parameters.SolutionBaseName }}.PSScripts/Set-CertficatesDirectoriesInFileShare.ps1
            scriptArguments: '-ResourceGroupName ${{ parameters.StaxSharedStorageAccountResourceGroup }} -ShareName "certificates" -StorageAccountName ${{ parameters.StaxDraftStorageAccountName }} -Verbose'
            azurePowerShellVersion: 'latestVersion'
        - task: AzurePowerShell@4
          displayName: 'Azure PowerShell script: Set-CertficatesDirectoriesInFileShare'
          inputs:
            azureSubscription: ${{ parameters.AzureSubscriptionEndpoint }}
            scriptPath: $(Pipeline.Workspace)/${{ parameters.SolutionBaseName }}.PSScripts/Set-CertficatesDirectoriesInFileShare.ps1
            scriptArguments: '-ResourceGroupName ${{ parameters.StaxSharedStorageAccountResourceGroup }} -ShareName "certificates" -StorageAccountName ${{ parameters.StaxVisitStorageAccountName }} -Verbose'
            azurePowerShellVersion: 'latestVersion'
        - checkout: dfc-devops
          path: 's/'
        - task: AzurePowerShell@4
          displayName: 'Azure PowerShell script: Export-KeyVaultCertToPemFiles'
          inputs:
            azureSubscription: ${{ parameters.AzureSubscriptionEndpoint }}
            scriptPath: $(Build.SourcesDirectory)/PSCoreScripts/Export-KeyVaultCertToPemFiles.ps1
            scriptArguments: '-CertificateSecretName ${{ parameters.CertificateSecretName }} -FileShare "certificates" -FullChainOutputDirectories @("default","default\trusted") -KeyVaultName ${{ parameters.KeyVaultName }} -PrivKeyOutputDirectories @("default") -StorageAccountName ${{ parameters.StaxSharedStorageAccountName }} -StorageResourceGroupName ${{ parameters.StaxSharedStorageAccountResourceGroup }} -Verbose'
            azurePowerShellVersion: 'latestVersion'
        - task: AzurePowerShell@4
          displayName: 'Azure PowerShell script: Export-KeyVaultCertToPemFiles'
          inputs:
            azureSubscription: ${{ parameters.AzureSubscriptionEndpoint }}
            scriptPath: $(Build.SourcesDirectory)/PSCoreScripts/Export-KeyVaultCertToPemFiles.ps1
            scriptArguments: '-CertificateSecretName ${{ parameters.DraftDatabaseCertificateSecretName }} -FileShare "certificates" -FullChainOutputDirectories @("default","default\trusted") -KeyVaultName ${{ parameters.KeyVaultName }} -PrivKeyOutputDirectories @("default") -StorageAccountName ${{ parameters.StaxDraftStorageAccountName }} -StorageResourceGroupName ${{ parameters.StaxSharedStorageAccountResourceGroup }} -Verbose'
            azurePowerShellVersion: 'latestVersion'
        - task: AzurePowerShell@4
          displayName: 'Azure PowerShell script: Export-KeyVaultCertToPemFiles'
          inputs:
            azureSubscription: ${{ parameters.AzureSubscriptionEndpoint }}
            scriptPath: $(Build.SourcesDirectory)/PSCoreScripts/Export-KeyVaultCertToPemFiles.ps1
            scriptArguments: '-CertificateSecretName ${{ parameters.VisitDatabaseCertificateSecretName }} -FileShare "certificates" -FullChainOutputDirectories @("default","default\trusted") -KeyVaultName ${{ parameters.KeyVaultName }} -PrivKeyOutputDirectories @("default") -StorageAccountName ${{ parameters.StaxVisitStorageAccountName }} -StorageResourceGroupName ${{ parameters.StaxSharedStorageAccountResourceGroup }} -Verbose'
            azurePowerShellVersion: 'latestVersion'

        #Create Namespace for neo4j
        - template: AzureDevOpsTemplates\Deploy\StepTemplates\dfc-kubernetes-create-namespace.yml@dfc-devops
          parameters:
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            AksResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            Namespace: ${{ parameters.Neo4jNamespace }}
        # create storage secret
        - task: Kubernetes@1
          displayName: kubectl create storage secret
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            azureResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            useClusterAdmin: true
            namespace: '${{ parameters.Neo4jNamespace }}'
            secretType: generic
            secretArguments: --from-literal=azurestorageaccountname=${{ parameters.StaxSharedStorageAccountName }} --from-literal=azurestorageaccountkey=${{ parameters.StaxSharedStorageAccountKey }}
            secretName: staxsharedstr-account-secret
        # create secret for neo4j default account password
        - task: Kubernetes@1
          displayName: kubectl create neo4j secret
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            azureResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            useClusterAdmin: true
            namespace: '${{ parameters.Neo4jNamespace }}'
            secretType: generic
            secretArguments: --from-literal=username=neo4j --from-literal=password=${{ parameters.Neo4jPassword }} --from-literal=auth=neo4j/${{ parameters.Neo4jPassword }}
            secretName: neo4j-account-secret
        # deploy manifest
        - task: esfadevops.Tokenization.custom-build-task.Tokenization@0
          displayName: 'Tokenization: Transform file neo4jescodb.yaml'
          inputs:
            SourcePath: $(Pipeline.Workspace)/${{ parameters.ImageBaseName }}
            TargetFileNames: neo4jescodb.yaml
        - task: Kubernetes@1
          displayName: kubectl deploy manifest
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            azureResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            useClusterAdmin: true
            namespace: '${{ parameters.Neo4jNamespace }}'
            command: 'apply'
            arguments: '--filename=$(Pipeline.Workspace)/${{ parameters.ImageBaseName }}/neo4jescodb.yaml'


        #Create Namespace for neo4j DRAFT
        - template: AzureDevOpsTemplates\Deploy\StepTemplates\dfc-kubernetes-create-namespace.yml@dfc-devops
          parameters:
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            AksResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            Namespace: ${{ parameters.Neo4jDraftNamespace }}

        # create storage secret for Draft Env
        - task: Kubernetes@1
          displayName: kubectl create for Draft storage secret
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            azureResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            useClusterAdmin: true
            namespace: '${{ parameters.Neo4jDraftNamespace }}'
            secretType: generic
            secretArguments: --from-literal=azurestorageaccountname=${{ parameters.StaxDraftStorageAccountName }} --from-literal=azurestorageaccountkey=${{ parameters.StaxDraftStorageAccountKey }}
            secretName: staxdraftsharedstr-account-secret
        # create secret for neo4j Draft Env default account password
        - task: Kubernetes@1
          displayName: kubectl create neo4jdraft secret
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            azureResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            useClusterAdmin: true
            namespace: '${{ parameters.Neo4jDraftNamespace }}'
            secretType: generic
            secretArguments: --from-literal=username=neo4j --from-literal=password=${{ parameters.Neo4jPassword }} --from-literal=auth=neo4j/${{ parameters.Neo4jPassword }}
            secretName: neo4j-account-secret
        # deploy manifest For neo4j Draft Env
        - task: esfadevops.Tokenization.custom-build-task.Tokenization@0
          displayName: 'Tokenization: Transform file neo4jdraftescodb.yaml'
          inputs:
            SourcePath: $(Pipeline.Workspace)/${{ parameters.DraftImageBaseName }}
            TargetFileNames: neo4jdraftescodb.yaml
        - task: Kubernetes@1
          displayName: kubectl deploy manifest Neo4JDraft Database
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            azureResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            useClusterAdmin: true
            namespace: '${{ parameters.Neo4jDraftNamespace }}'
            command: 'apply'
            arguments: '--filename=$(Pipeline.Workspace)/${{ parameters.DraftImageBaseName }}/neo4jdraftescodb.yaml'

        #Create Namespace for neo4j VISIT
        - template: AzureDevOpsTemplates\Deploy\StepTemplates\dfc-kubernetes-create-namespace.yml@dfc-devops
          parameters:
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            AksResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            Namespace: ${{ parameters.Neo4jVisitNamespace }}

        # create storage secret for Visits Env
        - task: Kubernetes@1
          displayName: kubectl create for Visit storage secret
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            azureResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            useClusterAdmin: true
            namespace: '${{ parameters.Neo4jVisitNamespace }}'
            secretType: generic
            secretArguments: --from-literal=azurestorageaccountname=${{ parameters.StaxVisitStorageAccountName }} --from-literal=azurestorageaccountkey=${{ parameters.StaxVisitStorageAccountKey }}
            secretName: staxvisitsharedstr-account-secret
        # create secret for neo4j Visits Env default account password
        - task: Kubernetes@1
          displayName: kubectl create neo4jvisit secret
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            azureResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            useClusterAdmin: true
            namespace: '${{ parameters.Neo4jVisitNamespace }}'
            secretType: generic
            secretArguments: --from-literal=username=neo4j --from-literal=password=${{ parameters.Neo4jPassword }} --from-literal=auth=neo4j/${{ parameters.Neo4jPassword }}
            secretName: neo4j-account-secret
        # deploy manifest For neo4j Visits Env
        - task: esfadevops.Tokenization.custom-build-task.Tokenization@0
          displayName: 'Tokenization: Transform file neo4jvisit.yaml'
          inputs:
            SourcePath: $(Pipeline.Workspace)/${{ parameters.VisitImageBaseName }}
            TargetFileNames: neo4jvisit.yaml
        - task: Kubernetes@1
          displayName: kubectl deploy manifest Neo4JVisit Database
          inputs:
            connectionType: Azure Resource Manager
            azureSubscriptionEndpoint: ${{ parameters.AzureSubscriptionEndpoint }}
            azureResourceGroup: ${{ parameters.AksResourceGroup }}
            kubernetesCluster: ${{ parameters.KubernetesCluster }}
            useClusterAdmin: true
            namespace: '${{ parameters.Neo4jVisitNamespace }}'
            command: 'apply'
            arguments: '--filename=$(Pipeline.Workspace)/${{ parameters.VisitImageBaseName }}/neo4jvisit.yaml'